script(type="text/javascript").
	Vue.prototype.$ = $;
	Vue.prototype.window = window;
	Vue.prototype.ZoomMtg = ZoomMtg;
	new Vue({
		el: '#meetingvue',
		data: function data(){
			return {
				meeting: this.parseObj(!{JSON.stringify(meeting)}),
				dropped: false,
				res: window.innerWidth < 600
			}
		},
		mounted: function(){
			var self = this;
			$(document).ready(function(){
				document.addEventListener('keydown', function(event) {
					var keyName = event.key;
					if (keyName === 'Enter') event.preventDefault()
				});
			})
			console.log('checkSystemRequirements');
			console.log(JSON.stringify(ZoomMtg.checkSystemRequirements()));
			//- ZoomMtg.setZoomJSLib('https://dmogdx0jrul3u.cloudfront.net/1.7.2/lib', '/av');
			ZoomMtg.preLoadWasm()
			ZoomMtg.prepareJssdk()

			this.zoomMeeting = document.getElementById("zmmtg-root");
			var meetingId = self.meeting.id;
			console.log(meetingId)
			if (meetingId) {
				$.post(`/signature/${meetingId}`)
				.then(function (response) {
					console.log(response)
					ZoomMtg.init({
						leaveUrl: `/meetingEnd/${meetingId}`,
						isSupportAV: true,
						success: function() {
							console.log('init success')
							ZoomMtg.join({
								signature: response.signature,
								apiKey: response.apiKey,
								meetingNumber: meetingId,
								userName: 'tb',
								//- userEmail: 'tbushman@pu.bli.sh', 
								// password optional; set by Host
								//- password: '',
								password: self.meeting.encrypted_password,
								success: function() {
									console.log('join success')
								},
								error: function(res) { 
									console.log('join fail')
									console.log(res) 
								}
							})		
						}
					})
				})

			}
		},
		methods: Object.assign({}, baseFunctions)
	});
