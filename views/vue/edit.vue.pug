script(type="text/javascript").
	Vue.prototype.$ = $;
	Vue.prototype.window = window;
	Vue.prototype.moment = moment;
	Vue.prototype.marked = marked;
	if (typeof tinymce === 'object') Vue.prototype.tinymce = tinymce;
	new Vue({
		el: '#vue',
		data: function data(){
			return {
				admin: this.parseObj(!{JSON.stringify(admin)}),
				pu: this.parseObj(!{JSON.stringify(pu)}),
				valid: {},
				adminValidated: this.parseObj(!{JSON.stringify(admin)}),
				new: (!this.parseObj(!{JSON.stringify(doc)})),
				doc: this.parseObj(!{JSON.stringify(doc)}),
				dropped: false,
				res: window.innerWidth < 600,
				year: null,
				month: null,
				day: null,
				hour: null,
				minute: null,
				date: moment().utc().format(),
				years: this.parseObj(this.getYrs()),
				months: this.parseObj(this.getMos()),
				days: this.parseObj(this.getDays()),
				hours: this.parseObj(this.getHrs()),
				minutes: this.parseObj(this.getMins()),
				thirty: [8,3,5,10],
				thirtyone: [0,2,4,6,7,9,11],
				twentyeight: [1],
				monthstr: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
				pm: 0,
				menu: this.parseObj(!{JSON.stringify(menu)}),
				tinymce: null

			}
		},
		mounted: function(){
			var self = this;
			$(document).ready(function(){
				document.addEventListener('keydown', function(event) {
					var keyName = event.key;
					if (keyName === 'Enter') event.preventDefault()
				});
			});
			setTimeout(function(){
				var docDate = (
					!self.doc ?
					new Date() :
					new Date(self.doc.start_time)
					//- moment().utc().format() :
					//- moment(self.doc.start_time).utc().format()
				);
				self.date = docDate;
				console.log(docDate)
				self.year = docDate.getFullYear()
				self.month = docDate.getMonth()
				self.day = docDate.getDate()
				self.hour = docDate.getHours()
				self.minute = docDate.getMinutes() >= 30 ? 30 : 0
				console.log(self.year, self.month, self.day, self.hour, self.hour, self.minute);
				self.appendStyleRoot();

				if (!self.tinymce && $('#description')[0] && typeof tinymce === 'object') {
					//- console.log($('#description')[0])
					self.tinymce = tinymce.init({
						menubar: false,
						statusbar: false,
						theme: 'inlite',
						inline: true,
						selector: "#description",
						plugins: 'lists',
						valid_elements: '*[*]',
						setup: function (editor) {
							//- editor.ui.registry.addButton('footnote', {
							editor.addButton('footnote', {
								text: 'Add footnote',
								icon: 'link',
								onclick: function(){
									self.doc.properties.footnotes.push(
										''
									);
									editor.insertContent('<a v-if="doc.properties.footnotes && doc.properties.footnotes['+(self.doc.properties.footnotes.length - 1)+']" href="ftnref'+(self.doc.properties.footnotes.length)+'"><span class="super">'+(self.doc.properties.footnotes.length)+'</span></a>')
									//editor.insertContent('<span v-if="doc.properties.footnotes && doc.properties.footnotes['+(self.doc.properties.footnotes.length - 1)+']" class="super">'+(self.doc.properties.footnotes.length)+'</span>')
									$('#footnote'+self.doc.properties.footnotes.length - 1).focus()
								}
							})
						},
						selection_toolbar: 'bold italic underline strikethrough | bullist numlist | outdent indent blockquote | subscript superscript | footnote'
					});
				}
			},1000)
		},
		methods: Object.assign({}, adminFunctions, baseFunctions)
	});

